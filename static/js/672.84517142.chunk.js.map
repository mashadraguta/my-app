{"version":3,"file":"static/js/672.84517142.chunk.js","mappings":"4LACA,GAAgB,QAAU,yBAAyB,MAAQ,uBAAuB,OAAS,wBAAwB,OAAS,wBAAwB,QAAU,yBAAyB,KAAO,sBAAsB,SAAW,0BAA0B,OAAS,yB,SCWlQ,EARmB,SAACA,GAChB,OACI,gBAAKC,UAAS,UAAKC,EAAAA,OAAL,YAAiBA,EAAAA,QAA/B,UACA,SAAC,KAAD,CAASC,GAAIH,EAAMI,GAAIH,UAAWC,EAAAA,OAAlC,SAA6CF,EAAMK,UCK3D,EARgB,SAACL,GACb,OACI,0BACK,gBAAKC,UAAWC,EAAAA,QAAhB,SAA4BF,EAAMM,U,oBCC3CC,GAAcC,EAAAA,EAAAA,GAAiB,KAyD7BC,GAAsBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,QAAlBD,EAvDE,SAACV,GAC3B,OAGI,iBAAMY,SAAUZ,EAAMa,aAAtB,UACI,iBAAKZ,UAAWC,EAAAA,KAAhB,WACI,SAACY,EAAA,EAAD,CAAOb,UAAWC,EAAAA,SACda,UAAWC,EAAAA,EACXX,KAAM,iBACNY,YAAa,iBACbC,SAAU,CAACC,EAAAA,EAAUZ,MAGzB,mBAAQN,UAAWC,EAAAA,OAAUkB,KAAK,SAAlC,0BA6ChB,EAnCgB,SAACpB,GAGb,IAKIqB,EAAcrB,EAAMsB,YAAYC,KAAI,SAAAC,GAAC,OACrC,SAACC,EAAD,CAAYpB,KAAMmB,EAAEnB,KAAMD,GAAIoB,EAAEpB,QAEhCsB,EAAe1B,EAAM2B,aAAaJ,KAAI,SAAAK,GAAC,OACvC,SAAC,EAAD,CAASxB,GAAIwB,EAAExB,GAAIE,KAAMsB,EAAEtB,UAO/B,OACI,iBAAKL,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKmB,KAEL,gBAAKpB,UAAWC,EAAAA,SAAhB,SACKwB,KAEL,SAACjB,EAAD,CAAqBG,SAxBb,SAACiB,GACbC,QAAQC,IAAIF,GACZ7B,EAAMgC,QAAQH,EAASI,uB,6BCI/B,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KA/BkB,SAACC,GAEnB,MAAO,CACHd,YAAac,EAAMC,QAAQf,YAC3BK,aAAcS,EAAMC,QAAQV,aAE5BW,OAAQF,EAAMG,KAAKD,WAKF,SAACE,GAEtB,MAAO,CACHR,QAAS,SAACC,GACNO,GAASC,EAAAA,EAAAA,GAAeR,SAiBhCS,EAAAA,EAFJ,CAGEC","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Dialogs_wrapper__qgdSv\",\"names\":\"Dialogs_names__XX0oH\",\"nameSS\":\"Dialogs_nameSS__GK4wU\",\"active\":\"Dialogs_active__Yy8nx\",\"message\":\"Dialogs_message__RWbjk\",\"item\":\"Dialogs_item__vbZnB\",\"textarea\":\"Dialogs_textarea__sfLVy\",\"button\":\"Dialogs_button__UU4Yr\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from '../Dialogs.module.css';\r\n\r\nconst Dialogitem = (props) => {\r\n    return (\r\n        <div className={`${s.nameSS} ${s.active}`}>\r\n        <NavLink to={props.id} className={s.nameSS}>{props.name}</NavLink>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Dialogitem;\r\n","\r\nimport React from 'react';\r\nimport s from '../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div>\r\n             <div className={s.message}>{props.text}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\nimport PostValidationForm from '../common/ValidationForm/PostValidationForm';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\n\r\nlet maxLength30 = maxLengthCreator(300);\r\n\r\nexport const AddMessageForm = (props) => {\r\n    return (\r\n\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.item}>\r\n                <Field className={s.textarea}\r\n                    component={PostValidationForm}\r\n                    name={\"newPostMessage\"}\r\n                    placeholder={\"newPostMessage\"}\r\n                    validate={[required, maxLength30]}\r\n                />\r\n\r\n                <button className={s.button} type=\"submit\">SEND</button>\r\n\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n\r\n    let onAddPost = (formData) => {\r\n        console.log(formData)\r\n        props.addPost(formData.newPostMessage);\r\n    }\r\n\r\n    let dialogsData = props.dialogsPage.map(d =>\r\n        <DialogItem name={d.name} id={d.id} />,\r\n    )\r\n    let messagesData = props.messagesPage.map(m =>\r\n        <Message id={m.id} text={m.text} />\r\n    )\r\n\r\n\r\n    // if (!props.isAuth) {\r\n    //     return <Navigate to=\"/login\" />\r\n    // }\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsData}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesData}\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={onAddPost} />\r\n        </div>\r\n    );\r\n\r\n}\r\nconst AddMessageReduxForm = reduxForm({ form: 'post' })(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n","// import React from 'react';\r\n// import { actionAddPostCreator, actionUpdateNewPostCreator } from '../../redux/dialogsReducer';\r\n// import StoreContext from '../../redux/StoreContext';\r\n\r\nimport React from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { addPostCreator } from '../../redux/dialogsReducer';\r\nimport { WithAuthRedirect } from '../../HOC/WithAuthRedirect'\r\nimport { compose } from 'redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n\r\n    return {\r\n        dialogsPage: state.profile.dialogsPage,\r\n        messagesPage: state.profile.messagesPage,\r\n        //   newTextPost: state.profile.newTextPost,\r\n        isAuth: state.auth.isAuth,\r\n\r\n    }\r\n\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n\r\n    return {\r\n        addPost: (newPostMessage) => {\r\n            dispatch(addPostCreator(newPostMessage));\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// let AuthRedirectComponent = WithAuthRedirect(Dialogs);\r\n\r\n// AuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent)\r\n\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect,\r\n)(Dialogs);\r\n\r\n\r\n//= connect(mapStateToProps, { addPost, updateOnChange })(AuthRedirectComponent);\r\n\r\n\r\n\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         addPost: () => {\r\n//             dispatch(actionAddPostCreator())\r\n//         },\r\n//         updateOnChange: (text) => {\r\n//             dispatch(actionUpdateNewPostCreator(text))\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const DialogsContainer = () => {\r\n\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//                 let state = store.getState();\r\n//                 const addPost = () => {\r\n\r\n//                     store.dispatch(actionAddPostCreator());\r\n\r\n//                 }\r\n\r\n//                 const updateOnChange = (text) => {\r\n\r\n//                     let action = actionUpdateNewPostCreator(text);\r\n//                     store.dispatch(action);\r\n\r\n//                 }\r\n//                return <Dialogs updateOnChange={updateOnChange}\r\n//                     addPost={addPost}\r\n//                     dialogsPage={state.profile.dialogsPage}\r\n//                     messagesPage={state.profile.messagesPage}\r\n//                     newTextPost={state.profile.newTextPost}\r\n//                 />\r\n//             }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n\r\n// }\r\n\r\n"],"names":["props","className","s","to","id","name","text","maxLength30","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","PostValidationForm","placeholder","validate","required","type","dialogsData","dialogsPage","map","d","DialogItem","messagesData","messagesPage","m","formData","console","log","addPost","newPostMessage","compose","connect","state","profile","isAuth","auth","dispatch","addPostCreator","WithAuthRedirect","Dialogs"],"sourceRoot":""}